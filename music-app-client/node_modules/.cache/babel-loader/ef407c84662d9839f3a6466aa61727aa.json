{"ast":null,"code":"var _jsxFileName = \"/Users/harrybrooks/Documents/Computing/Music App/music-app-client/src/containers/CreateTask.js\";\nimport React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nconst fs = require('fs');\n\nconst readline = require('readline');\n\nconst {\n  google\n} = require('googleapis'); // If modifying these scopes, delete token.json.\n\n\nconst SCOPES = ['https://www.googleapis.com/auth/drive.metadata.readonly']; // The file token.json stores the user's access and refresh tokens, and is\n// created automatically when the authorization flow completes for the first\n// time.\n\nconst TOKEN_PATH = 'token.json'; // Load client secrets from a local file.\n\nfs.readFile('credentials.json', (err, content) => {\n  if (err) return console.log('Error loading client secret file:', err); // Authorize a client with credentials, then call the Google Drive API.\n\n  authorize(JSON.parse(content), listFiles);\n});\n/**\n * Create an OAuth2 client with the given credentials, and then execute the\n * given callback function.\n * @param {Object} credentials The authorization client credentials.\n * @param {function} callback The callback to call with the authorized client.\n */\n\nfunction authorize(credentials, callback) {\n  const {\n    client_secret,\n    client_id,\n    redirect_uris\n  } = credentials.installed;\n  const oAuth2Client = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0]); // Check if we have previously stored a token.\n\n  fs.readFile(TOKEN_PATH, (err, token) => {\n    if (err) return getAccessToken(oAuth2Client, callback);\n    oAuth2Client.setCredentials(JSON.parse(token));\n    callback(oAuth2Client);\n  });\n}\n/**\n * Get and store new token after prompting for user authorization, and then\n * execute the given callback with the authorized OAuth2 client.\n * @param {google.auth.OAuth2} oAuth2Client The OAuth2 client to get token for.\n * @param {getEventsCallback} callback The callback for the authorized client.\n */\n\n\nfunction getAccessToken(oAuth2Client, callback) {\n  const authUrl = oAuth2Client.generateAuthUrl({\n    access_type: 'offline',\n    scope: SCOPES\n  });\n  console.log('Authorize this app by visiting this url:', authUrl);\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n  });\n  rl.question('Enter the code from that page here: ', code => {\n    rl.close();\n    oAuth2Client.getToken(code, (err, token) => {\n      if (err) return console.error('Error retrieving access token', err);\n      oAuth2Client.setCredentials(token); // Store the token to disk for later program executions\n\n      fs.writeFile(TOKEN_PATH, JSON.stringify(token), err => {\n        if (err) return console.error(err);\n        console.log('Token stored to', TOKEN_PATH);\n      });\n      callback(oAuth2Client);\n    });\n  });\n}\n/**\n * Lists the names and IDs of up to 10 files.\n * @param {google.auth.OAuth2} auth An authorized OAuth2 client.\n */\n\n\nfunction listFiles(auth) {\n  const drive = google.drive({\n    version: 'v3',\n    auth\n  });\n  drive.files.list({\n    pageSize: 10,\n    fields: 'nextPageToken, files(id, name)'\n  }, (err, res) => {\n    if (err) return console.log('The API returned an error: ' + err);\n    const files = res.data.files;\n\n    if (files.length) {\n      console.log('Files:');\n      files.map(file => {\n        console.log(`${file.name} (${file.id})`);\n      });\n    } else {\n      console.log('No files found.');\n    }\n  });\n}\n\nconst CreateTask = props => {\n  const addFileToDrive = () => {\n    console.log(\"called\");\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 21\n    }\n  }, \"Create a task\")), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: props.signOut,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  }, \"Sign out\"))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 22\n    }\n  }, \"This will be the active area\")), /*#__PURE__*/React.createElement(Button, {\n    onClick: addFileToDrive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, \"Add file to drive\")));\n};\n\nexport default CreateTask;","map":{"version":3,"sources":["/Users/harrybrooks/Documents/Computing/Music App/music-app-client/src/containers/CreateTask.js"],"names":["React","Container","Row","Col","Button","fs","require","readline","google","SCOPES","TOKEN_PATH","readFile","err","content","console","log","authorize","JSON","parse","listFiles","credentials","callback","client_secret","client_id","redirect_uris","installed","oAuth2Client","auth","OAuth2","token","getAccessToken","setCredentials","authUrl","generateAuthUrl","access_type","scope","rl","createInterface","input","process","stdin","output","stdout","question","code","close","getToken","error","writeFile","stringify","drive","version","files","list","pageSize","fields","res","data","length","map","file","name","id","CreateTask","props","addFileToDrive","signOut"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nconst fs = require('fs');\nconst readline = require('readline');\nconst {google} = require('googleapis');\n\n// If modifying these scopes, delete token.json.\nconst SCOPES = ['https://www.googleapis.com/auth/drive.metadata.readonly'];\n// The file token.json stores the user's access and refresh tokens, and is\n// created automatically when the authorization flow completes for the first\n// time.\nconst TOKEN_PATH = 'token.json';\n\n// Load client secrets from a local file.\nfs.readFile('credentials.json', (err, content) => {\n  if (err) return console.log('Error loading client secret file:', err);\n  // Authorize a client with credentials, then call the Google Drive API.\n  authorize(JSON.parse(content), listFiles);\n});\n\n/**\n * Create an OAuth2 client with the given credentials, and then execute the\n * given callback function.\n * @param {Object} credentials The authorization client credentials.\n * @param {function} callback The callback to call with the authorized client.\n */\nfunction authorize(credentials, callback) {\n  const {client_secret, client_id, redirect_uris} = credentials.installed;\n  const oAuth2Client = new google.auth.OAuth2(\n      client_id, client_secret, redirect_uris[0]);\n\n  // Check if we have previously stored a token.\n  fs.readFile(TOKEN_PATH, (err, token) => {\n    if (err) return getAccessToken(oAuth2Client, callback);\n    oAuth2Client.setCredentials(JSON.parse(token));\n    callback(oAuth2Client);\n  });\n}\n\n/**\n * Get and store new token after prompting for user authorization, and then\n * execute the given callback with the authorized OAuth2 client.\n * @param {google.auth.OAuth2} oAuth2Client The OAuth2 client to get token for.\n * @param {getEventsCallback} callback The callback for the authorized client.\n */\nfunction getAccessToken(oAuth2Client, callback) {\n  const authUrl = oAuth2Client.generateAuthUrl({\n    access_type: 'offline',\n    scope: SCOPES,\n  });\n  console.log('Authorize this app by visiting this url:', authUrl);\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n  });\n  rl.question('Enter the code from that page here: ', (code) => {\n    rl.close();\n    oAuth2Client.getToken(code, (err, token) => {\n      if (err) return console.error('Error retrieving access token', err);\n      oAuth2Client.setCredentials(token);\n      // Store the token to disk for later program executions\n      fs.writeFile(TOKEN_PATH, JSON.stringify(token), (err) => {\n        if (err) return console.error(err);\n        console.log('Token stored to', TOKEN_PATH);\n      });\n      callback(oAuth2Client);\n    });\n  });\n}\n\n/**\n * Lists the names and IDs of up to 10 files.\n * @param {google.auth.OAuth2} auth An authorized OAuth2 client.\n */\nfunction listFiles(auth) {\n  const drive = google.drive({version: 'v3', auth});\n  drive.files.list({\n    pageSize: 10,\n    fields: 'nextPageToken, files(id, name)',\n  }, (err, res) => {\n    if (err) return console.log('The API returned an error: ' + err);\n    const files = res.data.files;\n    if (files.length) {\n      console.log('Files:');\n      files.map((file) => {\n        console.log(`${file.name} (${file.id})`);\n      });\n    } else {\n      console.log('No files found.');\n    }\n  });\n}\n\nconst CreateTask = (props) => {\n\n    const addFileToDrive = () => {\n        console.log(\"called\");\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col>\n                    <h1>Create a task</h1>\n                </Col>\n                <Col>\n                    <Button onClick={props.signOut}>Sign out</Button>\n                </Col>\n            </Row>\n            <Row>\n                <Col><p>This will be the active area</p></Col>\n                <Button onClick={addFileToDrive}>Add file to drive</Button>\n            </Row>\n        </Container>\n    )\n}\n\nexport default CreateTask;"]},"metadata":{},"sourceType":"module"}